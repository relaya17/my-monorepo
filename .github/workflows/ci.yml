name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # בדיקות ובנייה
  test-and-build:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: |
          pnpm --filter ./my-monorepo-app/client lint
          pnpm --filter ./my-monorepo-app/server lint

      - name: Run type checking
        run: |
          pnpm --filter ./my-monorepo-app/client type-check
          pnpm --filter ./my-monorepo-app/server type-check

      - name: Run tests
        run: |
          pnpm --filter ./my-monorepo-app/client test
          pnpm --filter ./my-monorepo-app/server test

      - name: Build applications
        run: |
          pnpm --filter ./my-monorepo-app/client build
          pnpm --filter ./my-monorepo-app/server build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            my-monorepo-app/client/dist/
            my-monorepo-app/server/dist/

  # בדיקות אבטחה
  security:
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for vulnerabilities
        run: |
          if pnpm audit --audit-level moderate; then
            echo "No security vulnerabilities found"
          else
            echo "Security vulnerabilities found!"
            exit 1
          fi

  # פריסה אוטומטית (רק על main)
  deploy:
    runs-on: ubuntu-latest
    needs: [test-and-build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build for production
        run: |
          pnpm --filter ./my-monorepo-app/client build
          pnpm --filter ./my-monorepo-app/server build

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # כאן תהיה הפקודה לפריסה בפועל
          # לדוגמה: pnpm run deploy:prod

      - name: Notify deployment success
        run: |
          echo "✅ Deployment completed successfully!"
          # כאן תהיה שליחת התראה ל-Slack/Email 